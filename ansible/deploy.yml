---
- hosts: cas
  become: yes
  roles:
    - City-of-Bloomington.tomcat
  tasks:
    - name: "Update apache configuration"
      template:
        src: cas.conf
        dest: /etc/apache2/sites-enabled/conf.d/cas.conf
        owner: root
        group: root
        mode: 0644
      notify: apache_restart

    - name: "Create configuration directory"
      file:
        path: "/etc/cas/config"
        state: "directory"

    - name: "Create services directory"
      file:
        path: "/etc/cas/services"
        state: "directory"
        owner: "tomcat8"

    - name: "Create ssl directory"
      file:
        path: "/etc/cas/ssl"
        state: "directory"
        owner: "tomcat8"

    - name: "Configure CAS"
      template:
        src: "cas.properties"
        dest: "/etc/cas/config"
      notify: "tomcat_restart"

    - name: "Configure Admin Users"
      template:
        src: "adminusers.properties"
        dest: "/etc/cas/config"
      notify: "tomcat_restart"

    - name: "Install Google Private Key"
      copy:
        content: "{{ cas_google_ssl.private }}"
        dest: "/etc/cas/ssl/private.pem"
        mode: "0640"
        owner: "tomcat8"
      when: cas_google_ssl.private is defined
      register: "private_pem"
      #no_log: True
      notify: "tomcat_restart"

    #- name: "Convert Google Private Key"
    #  command: "openssl pkcs8 -topk8 -inform PEM -outform DER -nocrypt -in private.pem -out private.p8"
    #  args:
    #    chdir: "/etc/cas/ssl"
    #  when: private_pem.changed

    - name: "Install Google Public Key"
      command: "openssl rsa -pubout -in private.pem -out public.der -inform PEM -outform DER"
      args:
        chdir: "/etc/cas/ssl"
      when: private_pem.changed
      #no_log: True
      notify: "tomcat_restart"

    - name: "Install Google Cert"
      copy:
        content: "{{ cas_google_ssl.cert }}"
        dest: "/etc/cas/ssl/x509.pem"
        mode: "0640"
        owner: "tomcat8"
      when: cas_google_ssl.cert is defined
      #no_log: True
      notify: "tomcat_restart"

    - name: "Check for existing services"
      find:
        paths: "/etc/cas/services"
        patterns: "*.json"
      register: "existing_services"

    - name: "Configure services"
      template:
        src: "service.json"
        dest: "/etc/cas/services/{{ item.name | regex_replace('[\\s]', '') }}-{{ item.id }}.json"
        owner: "tomcat8"
      with_items: "{{ cas_services }}"
      when: existing_services.matched == "0"
      notify: "tomcat_restart"

    - name: "Install Webapp"
      copy:
        src: "../target/cas.war"
        dest: "{{ cas_install_path }}.war"
      notify: "tomcat_restart"
...
