cas.server.name: https://{{ ansible_host }}
cas.server.prefix: https://{{ ansible_host }}/{{ cas_webapp_name }}

#logging.config: file:/etc/cas/config/log4j2.xml
# cas.serviceRegistry.config.location: classpath:/services
cas.serviceRegistry.json.location=file:/etc/cas/services
cas.serviceRegistry.initFromJson=true

# These need to override default, example settings
# They must be declared, and they should remain empty
cas.authn.accept.users=
cas.authn.accept.name=
cas.authn.accept.credentialCriteria=

cas.authn.ldap[0].type=DIRECT

cas.authn.ldap[0].ldapUrl={{ cas_ldap.url }}
cas.authn.ldap[0].connectionStrategy=ACTIVE_PASSIVE
cas.authn.ldap[0].useSsl=true
cas.authn.ldap[0].useStartTls=false
# cas.authn.ldap[0].connectTimeout=5000
# cas.authn.ldap[0].subtreeSearch=true

# BaseDn used to start the LDAP search looking for accounts
cas.authn.ldap[0].baseDn={{ cas_ldap.baseDn }}

# The search filter to use while looking for accounts.
cas.authn.ldap[0].userFilter={{ cas_ldap.filter }}
#
# Bind credentials used to connect to the LDAP instance
#
#cas.authn.ldap[0].bindDn={{ cas_ldap.bindDn }}
#cas.authn.ldap[0].bindCredential={{ cas_ldap.bindPassword }}

# cas.authn.ldap[0].enhanceWithEntryResolver=true
cas.authn.ldap[0].dnFormat={{ cas_ldap.dnFormat }}
# cas.authn.ldap[0].principalAttributeId=uid
# cas.authn.ldap[0].principalAttributePassword=password

#
# Define attributes to be retrieved from LDAP as part of the same authentication transaction
# The left-hand size notes the source while the right-hand size indicate an optional renaming/remapping
# of the attribute definition. The same attribute name is allowed to be mapped multiple times to
# different attribute names.
#
# cas.authn.ldap[0].principalAttributeList=sn,cn:commonName,givenName,eduPersonTargettedId:SOME_IDENTIFIER

# cas.authn.ldap[0].collectDnAttribute=false
# cas.authn.ldap[0].principalDnAttributeName=principalLdapDn
# cas.authn.ldap[0].allowMultiplePrincipalAttributeValues=true
# cas.authn.ldap[0].allowMissingPrincipalAttributeValue=true
# cas.authn.ldap[0].credentialCriteria=


# Globally control whether endpoints are enabled
# or marked as sesitive to require authentication.
# endpoints.enabled=true
# endpoints.sensitive=true
cas.monitor.endpoints.enabled=true
cas.monitor.endpoints.sensitive=false
endpoints.enabled=true
endpoints.sensitive=false
cas.adminPagesSecurity.actuatorEndpointsEnabled=true

management.contextPath=/status
management.security.enabled=true
management.security.roles=ACTUATOR,ADMIN
management.security.sessions=if_required

# Each of the below endpoints can either be disabled
# or can be marked as 'sensitive' (or not)
# to enable authentication. The global flags above control
# everything and individual settings below act as overrides.

# endpoints.restart.enabled=false
# endpoints.shutdown.enabled=false
# endpoints.autoconfig.enabled=true
# endpoints.beans.enabled=true
# endpoints.bus.enabled=true
# endpoints.configprops.enabled=true
# endpoints.dump.enabled=true
# endpoints.env.enabled=true
# endpoints.health.enabled=true
# endpoints.features.enabled=true
# endpoints.info.enabled=true
# endpoints.loggers.enabled=true
# endpoints.logfile.enabled=true
# endpoints.trace.enabled=true
# endpoints.docs.enabled=false
# endpoints.heapdump.enabled=true

# IP address may be enough to protect all endpoints.
# If you wish to protect the admin pages via CAS itself, configure the rest.
cas.adminPagesSecurity.ip={{ cas_adminPagesSecurity.ip }}
cas.adminPagesSecurity.loginUrl=${cas.server.prefix}/login
cas.adminPagesSecurity.service=${cas.server.prefix}/status/dashboard
cas.adminPagesSecurity.users=file:/etc/cas/config/adminusers.properties
cas.adminPagesSecurity.adminRoles[0]=ROLE_ADMIN

{% if cas_google_ssl.private %}
cas.googleApps.publicKeyLocation=file:/etc/cas/ssl/public.der
cas.googleApps.keyAlgorithm=RSA
cas.googleApps.privateKeyLocation=file:/etc/cas/ssl/private.pem
{% endif %}
